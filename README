RPM build for Solr using builtin Jetty

solr version 4.10.4
jetty version 8.1.10.v20130312 (to match what is bundled with solr)
slf4j 1.7.6 (this is the version that ships with solr)
log4j 1.2.17 (this is the version that ships with solr)
log4j extras version 1.2.17 (to provide better log rotation features)

NOTE: if you want this build with CURRENT slf4j 1.7.11 and log4j 1.2.17 checkout the log4j_slf4j-current branch
NOTE: if you want this build with CURRENT slf4j 1.7.11 and logback 1.1.3 checkout the logback_slf4j-current branch

goal is a serviceable base rpm for deployment of solr on jetty

Usage:
======

0. git clone git@github.com:boogieshafer/jetty-solr-rpm.git

1. edit configurable settings in jetty-solr.spec as necessary
 
2. run the build-jetty-solr.sh script to create the RPM. it should download what it needs and kickoff the rpmbuild process.

3. jetty-solr rpm will be in RPMS/noarch directory

4. after installation edit /etc/default/jetty-solr

5. use the jetty-solr init script to control the service



Package Notes: 
==============

RPM install will create a solr user and group to run the service

JVM options are easily configured in /etc/default/jetty-solr
  -you will probably want to configure Xms and Xmx for your hardware

Logging is now handled by log4j framework in the master branch (see NOTES above)
  I prefer logback, and this script used to bundle it, but the admin UI in SOLR doesnt yet work correctly with logback
  -logging for jetty, solr, and the local zookeeper services is using similar configuration settings (rotation, formatting, etc)
  -RFC3339 datetime format + local TZ label for service log events
  -combined format for jetty HTTP request logs
  -log4j extras library is installed to handle log rotation with compression
  -using version 1.2.17 of log4j extras to match version of log4j bundled with solr
  -the SOLR admin UI seems to require SOLR related events sent to root logger
  -GC logging is enabled by default, not handled by log4j, it is rotated by JVM
  -the jetty start log is not handled by log4j, not rotated

JMX interface is enabled in a firewall friendly manner on TCP port 1099 with simple authentication
  -read access credentials: monitorRole/mrpasswd
  -read/write access credentials: controlRole/crpasswd
  -reference: http://wiki.eclipse.org/Jetty/Tutorial/JMX

there is a very basic script to send emails on java Errors or Out Of Memory to a configurable address


RPM build process was adapted from https://github.com/jfroche/solr-rpm
